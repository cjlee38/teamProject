/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.hufsSchedule'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
description = 'hufsScheduleSystem'
//java.sourceCompatibility = JavaVersion.VERSION_1_8q

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
//    implementation 'mysql:mysql-connector-java:8.0.19'
//    implementation 'com.querydsl:querydsl-apt:4.2.2'
//    implementation 'com.querydsl:querydsl-jpa:4.2.2'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'redis.clients:jedis:3.1.0'
    implementation 'com.google.guava:guava:30.1.1-jre'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    compileOnly 'org.springframework.boot:spring-boot-starter-tomcat'

    runtimeOnly 'com.h2database:h2'
}

//tasks.withType(JavaCompile) {
//    options.encoding = 'UTF-8'
//}

apply plugin: "io.spring.dependency-management"
dependencies {
    implementation("com.querydsl:querydsl-core") // querydsl
    implementation("com.querydsl:querydsl-jpa") // querydsl
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

}

def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}